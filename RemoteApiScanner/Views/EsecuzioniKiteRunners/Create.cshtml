@using Microsoft.AspNetCore.Identity
@inject SignInManager<IdentityUser> SignInManager
@inject UserManager<IdentityUser> UserManager

@model RemoteApiScanner.Models.EsecuzioniKiteRunner

@{
    ViewData["Title"] = "Create";
    Layout = "~/Views/Shared/_Layout.cshtml";
}


@if (!SignInManager.IsSignedIn(User))
{
    <div class="container d-flex">
        <div class="align-self-center">
            <div class="col-6 offset-3 mb-3">
                <img src="Img/Logo-RAS.png" class="w-100" />
            </div>
            <div class="col-10 offset-1 text-center">
                <p>RemoteApiScanner is a web application developed in .NET Core 7 for a university project. Based on the KiteRunner tool, RemoteApiScanner offers an intuitive and accessible interface for fully leveraging the extensive capabilities of KiteRunner in a simple and effective manner. With RemoteApiScanner, you can perform remote link scans and analyze APIs with customizable options. Depending on your needs, you can choose from various dictionary types and filter different status codes.</p>
                <a class="btn btn-outline-dark" asp-area="Identity" asp-page="/Account/Register">Register</a>
                <a class="btn btn-outline-success" asp-area="Identity" asp-page="/Account/Login">Login</a>
            </div>
        </div>
    </div>
}
else
{
    <div class="container d-flex">
        <div class="align-self-center col-12">
            <div class="col-4 offset-4 mb-3">
                <img src="Img/Logo-RAS.png" class="w-100"/>
            </div>
            <form asp-action="Create">
                <div class="col-6 offset-3 text-center">
                    <div class="input-group border border-secondary-subtle rounded rounded-3 shadow-sm">
                        <span class="input-group-text border border-0"><i class="bi bi-search"></i></span>
                        <input id="search-input" type="text" class="form-control text-center border border-0" placeholder="www.example.it">
                        <a class="input-group-text btn btn-outline-secondary border border-0" onclick="showFilters()"><i class="bi bi-filter"></i></a>
                        <a class="input-group-text btn btn-outline-secondary border border-0" onclick="send()"><i class="bi bi-send"></i></a>
                    </div>
                </div>
                <div class="col-6 offset-3 mt-2 text-center" id="warning">
                    <span class="text-secondary small"><i class="bi bi-exclamation-circle text-warning"></i> By default, the scanning process employs a 'small' dictionary without any status code filters applied.</span>
                </div>
                <div class="col-6 offset-3 mt-2" id="filters" style="display: none;">
                    <div class="card bordeer border-secondary-subtle rounded rounded-3 shadow-sm">
                        <div class="card-body">
                            <div class="row text-center">
                                <div class="col">
                                    <span class="type fw-bold">Dictionary</span>
                                    <div class="col">
                                        <label>
                                            <input type="radio" name="optionRoute" id="optionDemo" value="demo">
                                            Demo
                                        </label>
                                    </div>
                                    <div class="col">
                                        <label>
                                            <input type="radio" name="optionRoute" id="optionSmall" value="small" checked>
                                            Small
                                        </label>
                                    </div>
                                    <div class="col">
                                        <label>
                                            <input type="radio" name="optionRoute" id="optionLarge" value="large">
                                            Large
                                        </label>
                                    </div>
                                </div>
                                <div class="col">
                                    <span class="type fw-bold">Client Error</span>
                                    <div class="col">
                                        <label>
                                            <input type="checkbox" name="optionStatusCode" id="option400" value="400" checked>
                                            400: Bad request
                                        </label>
                                    </div>
                                    <div class="col">
                                        <label>
                                            <input type="checkbox" name="optionStatusCode" id="option401" value="401" checked>
                                            401: Unauthorized
                                        </label>
                                    </div>
                                    <div class="col">
                                        <label>
                                            <input type="checkbox" name="optionStatusCode" id="option403" value="403" checked>
                                            403: Forbidden
                                        </label>
                                    </div>
                                    <div class="col">
                                        <label>
                                            <input type="checkbox" name="optionStatusCode" id="option404" value="404" checked>
                                            404: Not found
                                        </label>
                                    </div>
                                    <div class="col">
                                        <label>
                                            <input type="checkbox" name="optionStatusCode" id="option405" value="405" checked>
                                            405: Method not allowed
                                        </label>
                                    </div>
                                    <div class="col">
                                        <label>
                                            <input type="checkbox" name="optionStatusCode" id="option426" value="426" checked>
                                            426: Upgrade required
                                        </label>
                                    </div>
                                </div>
                                <div class="col">
                                    <span class="type fw-bold">Server Error</span>
                                    <div class="col">
                                        <label>
                                            <input type="checkbox" name="optionStatusCode" id="option501" value="501" checked>
                                            501: Not implemented
                                        </label>
                                    </div>
                                    <div class="col">
                                        <label>
                                            <input type="checkbox" name="optionStatusCode" id="option502" value="502" checked>
                                            502: Bad gateway
                                        </label>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </form>
        </div>
    </div>
}


@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script type="text/javascript">
        function send() {
            var searchInput = document.getElementById("search-input").value; // Ottieni il valore dell'input di ricerca
            var selectedRoute = ""; //stringa con il valore route (dictionary)
            var selectedFilters = []; // Array per memorizzare i filtri selezionati

            var checkboxesRoutes = document.getElementsByName("optionRoute"); // Ottieni tutti gli elementi con name="optionRoutes"
            var checkboxesStatusCode = document.getElementsByName("optionStatusCode"); // Ottieni tutti gli elementi con name="optionStatusCode"

            // Scansiona tutti gli elementi routes e controlla se sono selezionati
            for (var i = 0; i < checkboxesRoutes.length; i++) {
                if (checkboxesRoutes[i].checked) {
                    selectedRoute = checkboxesRoutes[i].value; 
                }
            }

            // Scansiona tutti gli elementi statuscode e controlla se sono selezionati
            for (var i = 0; i < checkboxesStatusCode.length; i++) {
                if (!checkboxesStatusCode[i].checked) {
                    selectedFilters = checkboxesStatusCode[i].value;
                }
            }

            console.log("Input di ricerca:", searchInput);
            console.log("Routes selezionato:", selectedRoute);
            console.log("Filtri selezionati:", selectedFilters);

            $.ajax({
                url: '/api/Worker',
                method: 'POST',
                data: JSON.stringify({
                    user:"",
                    routes: selectedRoute,
                    link: searchInput,
                    statusCode: selectedFilters.toString(),
                }),
                contentType: 'application/json',
                success: function (response) {
                    // Gestisci la risposta dal controller qui
                    /*document.getElementById("search-input").value = ""; //svuoto barra di ricerca
                    document.getElementById("filters").style.display = "none"; //nascondo i filtri
                    for (var i = 0; i < checkboxes.length; i++){
                        if (checkboxes[i].checked) {
                            document.getElementById(checkboxes[i].id).checked = false; //deseleziono i filtri
                        }
                    }*/
                    // Simulate an HTTP redirect to /esecuzioniKiteRunners/Index
                    window.location.replace(window.location.href + "EsecuzioniKiteRunners/Index");
                },
                error: function (xhr, status, error) {
                    // Gestisci gli eventuali errori qui
                    console.log("ERRORE");
                }
            });
        }

        function showFilters() {
            var card = document.getElementById("filters"); // Ottieni l'elemento della card utilizzando l'ID
            var warning = document.getElementById("warning");
            if (card.style.display == "none") {
                warning.style.display = "none";
                card.style.display = "block"; // Mostra la card
            } else {
                card.style.display = "none"; // Nascondi la card
                warning.style.display = "block";
            }
        }

        function changeIcon(element, newIconClass) {
            var icon = element.querySelector('i');
            icon.className = 'bi ' + newIconClass;
        }
    </script>
}
